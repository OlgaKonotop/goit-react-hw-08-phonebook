{"version":3,"file":"static/js/727.b2026c59.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const ContactCard = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  padding: 5px;\n  background-color: #abd2f1;\n\n  margin-bottom: 15px;\n`;\nexport const Contact = styled.p`\n  margin-left: 30px;\n`;\nexport const Button = styled.button`\n  background-color: #abd2f1;\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  color: #0926a6;\n  padding: 5px 15px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  cursor: pointer;\n  margin-left: auto;\n  margin-right: 30px;\n\n  &:hover,\n  &:focus {\n    border: 1px solid #0926a6;\n    font-weight: 700;\n    background-color: #7aace8;\n  }\n`;\n","import {\n  Contact,\n  Button,\n  ContactCard,\n} from 'components/ContactItem/ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operation';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContactCard>\n      <Contact>\n        {name}: {number}\n      </Contact>\n      <Button type=\"button\" onClick={handleDelete}>\n        Видалити\n      </Button>\n    </ContactCard>\n  );\n};\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport PropTypes from 'prop-types';\n\nimport { selectFilter, selectAllContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const filterValue = useSelector(selectFilter).toLowerCase().trim();\n  console.log(contacts);\n\n  const visibleContacts = contacts.filter(item => {\n    return item.name.toLowerCase().includes(filterValue);\n    // .sort((a, b) => a.name.localeCompare(b.name));\n  });\n\n  console.log(visibleContacts);\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <ContactItem name={name} number={number} id={id} />\n        </li>\n      ))}\n      {visibleContacts.length === 0 && filterValue === '' && (\n        <p>телефонна книга порожня, будь ласка, додайте новий контакт</p>\n      )}\n      {visibleContacts.length === 0 && filterValue !== '' && (\n        <p>немає співпадінь</p>\n      )}\n    </ul>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.array,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n","import styled from 'styled-components';\nexport const TitleInput = styled.label`\n  color: #0926a6;\n  font-size: 16px;\n`;\nexport const Input = styled.input`\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  background-color: #d6e9ff;\n  padding: 5px;\n  margin-left: 15px;\n  margin-bottom: 15px;\n`;\n","import { TitleInput, Input } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { contactsFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleInputValue = e => {\n    const query = e.target.value;\n    console.log(query);\n\n    dispatch(contactsFilter(query));\n  };\n\n  return (\n    <TitleInput>\n      Введіть ім'я\n      <Input type=\"text\" name=\"name\" onChange={handleInputValue}></Input>\n    </TitleInput>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\nexport const FormStyle = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 15px;\n\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  padding: 25px;\n  width: 400px;\n`;\n\nexport const Button = styled.button`\n  background-color: #abd2f1;\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  color: #0926a6;\n  padding: 5px 15px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    border: 1px solid #fff;\n    font-weight: 700;\n    background-color: #7aace8;\n  }\n`;\nexport const TitleInput = styled.label`\n  color: #0926a6;\n  font-size: 20px;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  background-color: #d6e9ff;\n  padding: 5px;\n  margin-left: 25px;\n  width: 200px;\n`;\nexport const InputName = styled.input`\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  background-color: #d6e9ff;\n  padding: 5px;\n  margin-left: 70px;\n  width: 200px;\n`;\n","// import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Button, FormStyle, Input, InputName, TitleInput } from './Form.styled';\nimport { addContact } from 'redux/contacts/operation';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const ListContacts = {\n      name: form.name.value,\n      number: form.number.value,\n      id: nanoid(),\n    };\n\n    dispatch(addContact(ListContacts));\n    form.reset();\n  };\n\n  return (\n    <FormStyle onSubmit={handleSubmit}>\n      <TitleInput>\n        Ім'я\n        <InputName\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Михайлова Маргарита\"\n        />\n      </TitleInput>\n      <TitleInput>\n        Телефон\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"+38(0хх)-ххх-хх-хх\"\n        />\n      </TitleInput>\n      <Button type=\"submit\">Додати контакт</Button>\n    </FormStyle>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Form } from 'components/Form/Form';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operation';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Form />\n      <Filter />\n      <div>{isLoading && 'Виконується запит...'}</div>\n      <ContactList />\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["ContactCard","styled","Contact","Button","ContactItem","name","number","id","dispatch","useDispatch","type","onClick","deleteContact","selectLoading","state","contacts","loading","selectFilter","filter","selectAllContacts","items","ContactList","useSelector","filterValue","toLowerCase","trim","console","log","visibleContacts","item","includes","map","length","TitleInput","Input","Filter","onChange","e","query","target","value","contactsFilter","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","FormStyle","InputName","Form","onSubmit","preventDefault","form","ListContacts","addContact","reset","pattern","title","required","placeholder","isLoading","useEffect","fetchContacts"],"sourceRoot":""}